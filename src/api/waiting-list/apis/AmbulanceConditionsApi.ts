/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your_email@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Condition,
} from '../models';
import {
    ConditionFromJSON,
    ConditionToJSON,
} from '../models';

export interface GetConditionsRequest {
    ambulanceId: string;
}

/**
 * AmbulanceConditionsApi - interface
 * 
 * @export
 * @interface AmbulanceConditionsApiInterface
 */
export interface AmbulanceConditionsApiInterface {
    /**
     * Get predefined patient conditions for an ambulance.
     * @summary Provides the list of conditions for this ambulance
     * @param {string} ambulanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceConditionsApiInterface
     */
    getConditionsRaw(requestParameters: GetConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Condition>>>;

    /**
     * Get predefined patient conditions for an ambulance.
     * Provides the list of conditions for this ambulance
     */
    getConditions(requestParameters: GetConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Condition>>;

}

/**
 * 
 */
export class AmbulanceConditionsApi extends runtime.BaseAPI implements AmbulanceConditionsApiInterface {

    /**
     * Get predefined patient conditions for an ambulance.
     * Provides the list of conditions for this ambulance
     */
    async getConditionsRaw(requestParameters: GetConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Condition>>> {
        if (requestParameters.ambulanceId === null || requestParameters.ambulanceId === undefined) {
            throw new runtime.RequiredError('ambulanceId','Required parameter requestParameters.ambulanceId was null or undefined when calling getConditions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/waiting-list/{ambulanceId}/condition`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters.ambulanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConditionFromJSON));
    }

    /**
     * Get predefined patient conditions for an ambulance.
     * Provides the list of conditions for this ambulance
     */
    async getConditions(requestParameters: GetConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Condition>> {
        const response = await this.getConditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
